// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/service.proto

package protoconnect

import (
	proto "connectrpc-stream-example/gen/proto"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MyProtoName is the fully-qualified name of the MyProto service.
	MyProtoName = "MyProto"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MyProtoGiveInfoProcedure is the fully-qualified name of the MyProto's GiveInfo RPC.
	MyProtoGiveInfoProcedure = "/MyProto/GiveInfo"
	// MyProtoSayHelloProcedure is the fully-qualified name of the MyProto's SayHello RPC.
	MyProtoSayHelloProcedure = "/MyProto/SayHello"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	myProtoServiceDescriptor        = proto.File_proto_service_proto.Services().ByName("MyProto")
	myProtoGiveInfoMethodDescriptor = myProtoServiceDescriptor.Methods().ByName("GiveInfo")
	myProtoSayHelloMethodDescriptor = myProtoServiceDescriptor.Methods().ByName("SayHello")
)

// MyProtoClient is a client for the MyProto service.
type MyProtoClient interface {
	GiveInfo(context.Context, *connect.Request[proto.GiveInfoRequest]) (*connect.Response[proto.GiveInfoResponse], error)
	SayHello(context.Context, *connect.Request[proto.HelloRequest]) (*connect.ServerStreamForClient[proto.HelloReply], error)
}

// NewMyProtoClient constructs a client for the MyProto service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMyProtoClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MyProtoClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &myProtoClient{
		giveInfo: connect.NewClient[proto.GiveInfoRequest, proto.GiveInfoResponse](
			httpClient,
			baseURL+MyProtoGiveInfoProcedure,
			connect.WithSchema(myProtoGiveInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sayHello: connect.NewClient[proto.HelloRequest, proto.HelloReply](
			httpClient,
			baseURL+MyProtoSayHelloProcedure,
			connect.WithSchema(myProtoSayHelloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// myProtoClient implements MyProtoClient.
type myProtoClient struct {
	giveInfo *connect.Client[proto.GiveInfoRequest, proto.GiveInfoResponse]
	sayHello *connect.Client[proto.HelloRequest, proto.HelloReply]
}

// GiveInfo calls MyProto.GiveInfo.
func (c *myProtoClient) GiveInfo(ctx context.Context, req *connect.Request[proto.GiveInfoRequest]) (*connect.Response[proto.GiveInfoResponse], error) {
	return c.giveInfo.CallUnary(ctx, req)
}

// SayHello calls MyProto.SayHello.
func (c *myProtoClient) SayHello(ctx context.Context, req *connect.Request[proto.HelloRequest]) (*connect.ServerStreamForClient[proto.HelloReply], error) {
	return c.sayHello.CallServerStream(ctx, req)
}

// MyProtoHandler is an implementation of the MyProto service.
type MyProtoHandler interface {
	GiveInfo(context.Context, *connect.Request[proto.GiveInfoRequest]) (*connect.Response[proto.GiveInfoResponse], error)
	SayHello(context.Context, *connect.Request[proto.HelloRequest], *connect.ServerStream[proto.HelloReply]) error
}

// NewMyProtoHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMyProtoHandler(svc MyProtoHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	myProtoGiveInfoHandler := connect.NewUnaryHandler(
		MyProtoGiveInfoProcedure,
		svc.GiveInfo,
		connect.WithSchema(myProtoGiveInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	myProtoSayHelloHandler := connect.NewServerStreamHandler(
		MyProtoSayHelloProcedure,
		svc.SayHello,
		connect.WithSchema(myProtoSayHelloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/MyProto/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MyProtoGiveInfoProcedure:
			myProtoGiveInfoHandler.ServeHTTP(w, r)
		case MyProtoSayHelloProcedure:
			myProtoSayHelloHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMyProtoHandler returns CodeUnimplemented from all methods.
type UnimplementedMyProtoHandler struct{}

func (UnimplementedMyProtoHandler) GiveInfo(context.Context, *connect.Request[proto.GiveInfoRequest]) (*connect.Response[proto.GiveInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("MyProto.GiveInfo is not implemented"))
}

func (UnimplementedMyProtoHandler) SayHello(context.Context, *connect.Request[proto.HelloRequest], *connect.ServerStream[proto.HelloReply]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("MyProto.SayHello is not implemented"))
}
